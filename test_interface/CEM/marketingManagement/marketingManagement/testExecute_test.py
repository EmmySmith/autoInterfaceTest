#!/usr/bin/python# coding=utf-8import requestsimport unittestimport json,time,randomfrom common.public import *from mysqlHandle.common_mysql import *class ICEM_Interface(unittest.TestCase):    @classmethod    def setUpClass(self):        self.headers = headers        self.host = host        #添加活动        self.path_addActivity = "/api/icem-activity/market/activity/add"        #初始化开始节点        self.path_startNode = "/api/icem-activity/workflow/startNode"        #添加客群,目标组,短信节点        self.path_workFlowAdd = "/api/icem-activity/workflow/add"        #获取短信模板        self.path_smsTemplete = "/api/icem-sms/template/get"        #更新短信节点内容        self.path_updateSms = "/api/icem-sms/template/update"        #获取客群id        self.path_getCrowd = "/api/icem-crowd/crowds?page=0&size=10&sort=createTime,desc"        #选择人群        self.path_modify = "/api/icem-activity/workflow/modify"        #连接节点        self.path_link = "/api/icem-activity/workflow/link"        #测试执行        self.path_test = "/api/icem-activity/market/activity/test"        self.random = random.randint(1000,99999)        self.sql = "SELECT id FROM t_activity ORDER BY id DESC LIMIT 1;"        self.dbname = "geek_icem_activity"        print("----------开始测试----------")    #添加营销活动接口    def addActivity(self):        '''添加营销活动接口'''        self.url = self.host + self.path_addActivity        self.name = "自动化" + str(self.random)        data = {"name":self.name,"remark":"等等","executeDefinition":"IMMEDIATE","cycleRule":"DAY","cycleValue":1,"monthSymbol":"PLUS","monthDay":1,"executeScope":"ENDTIME","scopeCount":1,"endTime":"2019-08-30 17:50:50","executeType":"IMMEDIATE","deadlineTime":"2019-08-31 00:00:00"}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print(response.text)        self.activityId = response.json()['body']['id']        self.activityName = response.json()['body']['name']        return self.activityId,self.activityName    #初始化开始节点接口    def startNode(self,activityId):        '''初始化开始节点'''        self.url = self.host + self.path_startNode        data = {"activityId":activityId}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        self.startNodeId = response.json()['body']['id']        return self.startNodeId    #客群选人接口    def workflowAddVisitorSelection(self,activityId):        '''客群选人'''        self.url = self.host + self.path_workFlowAdd        data = {"type":"CROWD","nodeName":"客群选人","activityId":activityId,"x":389,"y":213}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        self.visitorId = response.json()['body']['id']        return self.visitorId    #自建分群接口    def userDefinedCrowd(self):        '''自建分群接口'''        self.url = self.host + self.path_getCrowd        # self.nodeDefineId = DB_ICEM_proc(self.dbname).get_vslues(self.sql)        data = {"type":"USER_DEFINED"}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        self.crowdId = response.json()['body']['content'][0]['id']        return self.crowdId    #客群选人确定接口    def workFlowModify(self,crowdKeyIds,nodeDefineId):        '''客群选人确定接口'''        self.url = self.host + self.path_modify        data = {"crowdKeyIds":[crowdKeyIds],"nodeDefineId":nodeDefineId,"nodeName":"客群选人"}        print("modify data:",data)        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)    #生成目标组接口    def workflowAddTargetGroups(self,activityId):        '''生成目标组接口'''        self.url = self.host + self.path_workFlowAdd        data = {"type":"TARG_GROUP","nodeName":"生成目标组","activityId":activityId,"x":808,"y":349}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        self.targetGroupsId = response.json()['body']['id']        return self.targetGroupsId    #沟通节点-发送短信接口    def workflowAddSendSms(self,activityId):        '''沟通节点-发送短信接口'''        self.url = self.host + self.path_workFlowAdd        data = {"type":"SMS","nodeName":"发短信","activityId":activityId,"x":428,"y":563}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        self.sendSmsId = response.json()['body']['id']        return self.sendSmsId    #获取发短信接口    def smsTemplateGet(self,nodeDefineId):        '''获取发短信接口'''        self.url = self.host + self.path_smsTemplete        data = {"id":nodeDefineId,"type":"SMS"}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        self.templateId = response.json()['body']['templates'][0]['id']        return self.templateId    #更新发短信节点接口    def updateSmsNode(self,nodeDefineId,templateId):        '''更新发短信节点接口'''        self.url = self.host + self.path_updateSms        # print(self.nodeDefineId)        data = {"id":nodeDefineId,"name":"发短信","signId":2,"templateId":templateId,"testNumbers":"13522773597"}        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)    #链接节点接口    def workFlowLink(self,crowd_id,start_id,nodeDefineId):        '''链接节点接口'''        self.url = self.host + self.path_link        data = {"activityId":crowd_id,"parentId":start_id,"childId":nodeDefineId}        print(data)        print(self.url)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print(response.text)    #测试执行接口    def testExecute(self):        '''测试执行接口'''        self.activityId,self.activityName = ICEM_Interface().addActivity()        self.startNode = ICEM_Interface().startNode(self.activityId)        self.visitorId = ICEM_Interface().workflowAddVisitorSelection(self.activityId)        self.targetGroupsId = ICEM_Interface().workflowAddTargetGroups(self.activityId)        self.sendSmsId = ICEM_Interface().workflowAddSendSms(self.activityId)        self.templateId = ICEM_Interface().smsTemplateGet(self.sendSmsId)        ICEM_Interface().updateSmsNode(self.sendSmsId,self.templateId)        self.crowdId = ICEM_Interface().userDefinedCrowd()        ICEM_Interface().workFlowModify(self.crowdId,self.visitorId)        ICEM_Interface().workFlowLink(self.activityId,self.startNode,self.visitorId)        ICEM_Interface().workFlowLink(self.activityId,self.visitorId,self.targetGroupsId)        ICEM_Interface().workFlowLink(self.activityId,self.targetGroupsId,self.sendSmsId)        self.url = self.host + self.path_test        data = {"name":self.activityName,"id":self.activityId,"remark":"随时随地","executeType":"IMMEDIATE"}        print(self.url)        print(data)        response = requests.post(url=self.url,data= json.dumps(data), headers=self.headers)        print (response.text)        assert response.json()['error'] == 0    def tearDown(self):        passif __name__ == "__main__":    sms = ICEM_Interface()